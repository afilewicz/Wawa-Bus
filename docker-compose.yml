services:
  nosql-db:
    image: mongo:8.0
    restart: "no"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE}
    volumes:
      - app-nosql-db-data:/data/db
    ports:
      - "27017:27017"

  sql-db:
    image: postgres:12
    restart: "no"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    ports:
      - "5432:5432"

  backend-api:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    restart: "no"
    networks:
      - default
    depends_on:
      sql-db:
        condition: service_healthy
#        restart: true
    env_file:
      - .env
    ports:
      - "8000:8000"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./api

  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    restart: "no"
    networks:
      - default
    depends_on:
      backend-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  data-retrieval:
    image: '${DOCKER_IMAGE_DATA_RETRIEVAL?Variable not set}:${TAG-latest}'
    restart: "no"
    networks:
      - default
    build:
        context: ./data_retrieval
    depends_on:
      nosql-db:
        condition: service_healthy
    environment:
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DATABASE=${MONGO_DATABASE}
      - WARSAW_API_URL=${WARSAW_API_URL}
      - WARSAW_API_KEY=${WARSAW_API_KEY}
      - HEARTBEAT=${HEARTBEAT}

  postgres-exporter:
    profiles:
      - deployment
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    depends_on:
        sql-db:
          condition: service_healthy
    networks:
        - default
    environment:
      - DATA_SOURCE_URI=${POSTGRES_HOST}:${POSTGRES_PORT}/postgres?sslmode=disable
      - DATA_SOURCE_USER=${POSTGRES_USER}
      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}
  mongo-exporter:
    profiles:
      - deployment
    networks:
        - default
    image: bitnami/mongodb-exporter:0.11.0-debian-10-r75
    environment:
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:27017

  prometheus:
    profiles:
      - deployment
    image: prom/prometheus
    container_name: prometheus
    networks:
        - default
    ports:
      - '9090:9090'
    volumes:
      - './grafana/prometheus:/etc/prometheus'
    command: '--config.file=/etc/prometheus/prometheus.yml'

  grafana:
      profiles:
        - deployment
      image: grafana/grafana-enterprise
      container_name: grafana
      restart: unless-stopped
      environment:
        - DATABASE_SSL_MODE=disable
        - GF_LOG_LEVEL=debug
        - POSTGRES_HOST=${POSTGRES_HOST}
        - POSTGRES_PORT=${POSTGRES_PORT}
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DATABASE=${POSTGRES_DB}
      ports:
        - '4100:3000'
      volumes:
        - './grafana/config/grafana.ini:/etc/grafana/grafana.ini'
        - './grafana/provisioning:/etc/grafana/provisioning'
        - 'grafana_storage:/var/lib/grafana'
      networks:
        - default

volumes:
  app-db-data:
  app-nosql-db-data:
  grafana_storage:

networks:
  default:
    driver: bridge